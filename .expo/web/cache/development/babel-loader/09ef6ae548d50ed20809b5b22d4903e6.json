{"ast":null,"code":"import axios from 'axios';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { getUser, navigate, deleteUser } from \"../utils\";\nvar api = axios.create({\n  baseURL: 'https://api-jwt-tutorial.herokuapp.com',\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json'\n  }\n});\napi.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.request._hasError === true && error.request._response.includes('connect')) {\n    Alert.alert('Aviso', 'Não foi possível conectar aos nossos servidores, sem conexão a internet', [{\n      text: 'OK'\n    }], {\n      cancelable: false\n    });\n  }\n\n  if (error.response.status === 401) {\n    var requestConfig = error.config;\n    deleteUser().then(function () {\n      navigate('AuthLoading', {});\n    });\n    return axios(requestConfig);\n  }\n\n  return Promise.reject(error);\n});\napi.interceptors.request.use(function (config) {\n  return getUser().then(function (user) {\n    user = JSON.parse(user);\n    if (user && user.token) config.headers.Authorization = \"Bearer \" + user.token;\n    return Promise.resolve(config);\n  }).catch(function (error) {\n    console.log(error);\n    return Promise.resolve(config);\n  });\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"sources":["C:/Users/emily.lombarde/Documents/SocialGlobo/src/services/api.js"],"names":["axios","getUser","navigate","deleteUser","api","create","baseURL","headers","Accept","interceptors","response","use","error","request","_hasError","_response","includes","Alert","alert","text","cancelable","status","requestConfig","config","then","Promise","reject","user","JSON","parse","token","Authorization","resolve","catch","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAIA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,UAA5B;AAEA,IAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAE,wCADc;AAGvBC,EAAAA,OAAO,EAAE;AACP,oBAAgB,kBADT;AAEPC,IAAAA,MAAM,EAAE;AAFD;AAHc,CAAb,CAAZ;AASAJ,GAAG,CAACK,YAAJ,CAAiBC,QAAjB,CAA0BC,GAA1B,CACE,UAAAD,QAAQ,EAAI;AAIV,SAAOA,QAAP;AACD,CANH,EAOE,UAAAE,KAAK,EAAI;AAOP,MACEA,KAAK,CAACC,OAAN,CAAcC,SAAd,KAA4B,IAA5B,IACAF,KAAK,CAACC,OAAN,CAAcE,SAAd,CAAwBC,QAAxB,CAAiC,SAAjC,CAFF,EAGE;AACAC,IAAAA,KAAK,CAACC,KAAN,CACE,OADF,EAEE,yEAFF,EAGE,CAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAF,CAHF,EAIE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAJF;AAMD;;AAED,MAAIR,KAAK,CAACF,QAAN,CAAeW,MAAf,KAA0B,GAA9B,EAAmC;AACjC,QAAMC,aAAa,GAAGV,KAAK,CAACW,MAA5B;AAIApB,IAAAA,UAAU,GACPqB,IADH,CACQ,YAAM;AACVtB,MAAAA,QAAQ,CAAC,aAAD,EAAgB,EAAhB,CAAR;AACD,KAHH;AAKA,WAAOF,KAAK,CAACsB,aAAD,CAAZ;AACD;;AAED,SAAOG,OAAO,CAACC,MAAR,CAAed,KAAf,CAAP;AACD,CAxCH;AA2CAR,GAAG,CAACK,YAAJ,CAAiBI,OAAjB,CAAyBF,GAAzB,CACE,UAAAY,MAAM,EAAI;AACR,SAAOtB,OAAO,GACXuB,IADI,CACC,UAAAG,IAAI,EAAI;AACZA,IAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AACA,QAAIA,IAAI,IAAIA,IAAI,CAACG,KAAjB,EACEP,MAAM,CAAChB,OAAP,CAAewB,aAAf,eAAyCJ,IAAI,CAACG,KAA9C;AACF,WAAOL,OAAO,CAACO,OAAR,CAAgBT,MAAhB,CAAP;AACD,GANI,EAOJU,KAPI,CAOE,UAAArB,KAAK,EAAI;AACdsB,IAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAZ;AACA,WAAOa,OAAO,CAACO,OAAR,CAAgBT,MAAhB,CAAP;AACD,GAVI,CAAP;AAWD,CAbH,EAcE,UAAAX,KAAK,EAAI;AACP,SAAOa,OAAO,CAACC,MAAR,CAAed,KAAf,CAAP;AACD,CAhBH;AAmBA,eAAeR,GAAf","sourcesContent":["import axios from 'axios'\r\n\r\nimport { Alert } from 'react-native'\r\n\r\nimport { getUser, navigate, deleteUser } from '../utils'\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://api-jwt-tutorial.herokuapp.com',\r\n  // baseURL: 'http://10.0.3.2:3000',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n  },\r\n})\r\n\r\napi.interceptors.response.use(\r\n  response => {\r\n\r\n    // Do something with response data\r\n\r\n    return response\r\n  },\r\n  error => {\r\n\r\n    // Do something with response error\r\n\r\n    // You can even test for a response code\r\n    // and try a new request before rejecting the promise\r\n\r\n    if (\r\n      error.request._hasError === true &&\r\n      error.request._response.includes('connect')\r\n    ) {\r\n      Alert.alert(\r\n        'Aviso',\r\n        'Não foi possível conectar aos nossos servidores, sem conexão a internet',\r\n        [ { text: 'OK' } ],\r\n        { cancelable: false },\r\n      )\r\n    }\r\n\r\n    if (error.response.status === 401) {\r\n      const requestConfig = error.config\r\n\r\n      // O token JWT expirou\r\n\r\n      deleteUser()\r\n        .then(() => {\r\n          navigate('AuthLoading', {})\r\n        })\r\n\r\n      return axios(requestConfig)\r\n    }\r\n\r\n    return Promise.reject(error)\r\n  },\r\n)\r\n\r\napi.interceptors.request.use(\r\n  config => {\r\n    return getUser()\r\n      .then(user => {\r\n        user = JSON.parse(user)\r\n        if (user && user.token)\r\n          config.headers.Authorization = `Bearer ${user.token}`\r\n        return Promise.resolve(config)\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        return Promise.resolve(config)\r\n      })\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  },\r\n)\r\n\r\nexport default api"]},"metadata":{},"sourceType":"module"}